{"version":3,"sources":["../auto.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,eAAA,EAAgB,MAAO,MAAA,CAAO;AAIvC;IAcI;QAPA,eAAU,GAAW,EAAE,CAAC;QAExB,gBAAW,GAAY,KAAK,CAAC;QAMzB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,kBAAkB,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC;IAEM,4CAAc,GAArB,UAAsB,IAAgB;QAElC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxC,MAAM,CAAC;QACX,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC;IAEM,wCAAU,GAAjB,UAAkB,IAAgB,EAAE,EAAO;QAEvC,EAAE,CAAC,CAAC,IAAI,IAAI,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC;YAAC,MAAM,CAAC;QAC9C,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEjC,CAAC;IACE,8BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,kCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,0BAAC;CA7CD,AA6CC,IAAA;SA7CY,mBAAmB","file":"auto.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\n\n\n\nexport class AutoCompleteService {\n    settingDynamicList: BehaviorSubject<boolean>;\n    updatingList: BehaviorSubject<boolean>;\n\n    list: Array<any>;\n    noRecordPlaceHolder: string;\n    filterName: string;\n    listlength: number = 15;\n    wordTrigger: number;\n    dataPresent: boolean = false;\n\n    updatedList: Array<any>;\n    updatedListId: string;\n\n    constructor() {\n        this.list = [];\n        this.settingDynamicList = new BehaviorSubject(false);\n        this.updatingList = new BehaviorSubject(false);\n    }\n\n    public setDynamicList(list: Array<any>) {\n\n        if (list.length === 0) {\n            console.log('dynamic list found empty');\n            return;\n        }\n\n        this.list = list;\n        this.settingDynamicList.next(true);\n    }\n\n    public updateList(list: Array<any>, id: any) {\n\n        if (list == undefined || list == null) return;\n        this.updatedListId = id;\n        this.updatedList = list;\n        this.updatingList.next(true);\n\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}