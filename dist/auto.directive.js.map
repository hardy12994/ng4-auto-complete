{"version":3,"sources":["../auto.directive.ts"],"names":[],"mappings":"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","file":"auto.directive.js","sourceRoot":"","sourcesContent":["import {\n    Directive,\n    ElementRef,\n    Input,\n    Renderer2,\n    OnInit,\n    EventEmitter,\n    Output,\n    Optional\n} from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { NgControl } from \"@angular/forms\";\nimport { AutoCompleteService } from \"./auto.service\";\n\ndeclare const $: any;\n\n\n\nexport class AutoCompleteDirective implements OnInit {\n     ngModelChange = new EventEmitter(); // for normal model change\n     valueChanged = new EventEmitter();  // for normal value change\n    noRecordPlaceHolder: string;\n    filterName: string;\n    listlength: number = 15;\n    listType: string;\n    list: Array<any>;\n    wordTrigger: number;\n    listShown: any;\n    inpRef: any;\n    dropdownInitiated = false;\n\n    constructor(public elemRef: ElementRef,\n        public renderer: Renderer2,\n        public autoCompleteService: AutoCompleteService,\n         public reactiveFormControl: NgControl\n    ) {\n        this.inpRef = elemRef.nativeElement;\n        this.renderer.setAttribute(this.inpRef, \"spellcheck\", \"false\");\n        this.getDataFromService();\n        this.activateEvents();\n    }\n\n    ngOnInit() {\n        this.configureListType();\n        this.configureDirective();\n    }\n\n    getDataFromService() {\n        if (this.autoCompleteService.dataPresent) {\n            this.list = this.autoCompleteService.list;\n            this.wordTrigger = this.autoCompleteService.wordTrigger;\n            this.listlength = this.autoCompleteService.listlength;\n            this.filterName = this.autoCompleteService.filterName;\n            this.noRecordPlaceHolder = this.autoCompleteService.noRecordPlaceHolder;\n        }\n    }\n\n     set autoComplete(list: any) {\n        this.list = list ? (list.length ? list : []) : [];\n\n        if (this.list.length === 0) {\n            console.log('static list found empty');\n        }\n\n        if (list != undefined || list != null) {\n            this.autoCompleteService.list = list;\n            this.autoCompleteService.dataPresent = true;\n\n        } else {\n            this.list = this.autoCompleteService.list;\n        }\n    }\n\n     set openOnWordLength(word_trigger: number) {\n        this.wordTrigger = Number(word_trigger);\n        this.autoCompleteService.wordTrigger = this.wordTrigger;\n\n        if (word_trigger != undefined || word_trigger != null) {\n            this.autoCompleteService.wordTrigger = Number(word_trigger);\n            this.autoCompleteService.dataPresent = true;\n\n        } else {\n            this.wordTrigger = this.autoCompleteService.wordTrigger;\n        }\n    }\n\n     set listLengthToShow(listlength: number) {\n        this.listlength = Number(listlength);\n\n        if (listlength != undefined || listlength != null) {\n            this.autoCompleteService.listlength = Number(listlength);\n            this.autoCompleteService.dataPresent = true;\n\n        } else {\n            this.listlength = this.autoCompleteService.listlength;\n        }\n    }\n\n     set filterIdentity(filterName: string) {\n        this.filterName = filterName;\n\n        if (filterName != undefined || filterName != null) {\n            this.autoCompleteService.filterName = filterName;\n            this.autoCompleteService.dataPresent = true;\n\n        } else {\n            this.filterName = this.autoCompleteService.filterName;\n        }\n    }\n\n     set noRecordText(defaultText: string) {\n        this.noRecordPlaceHolder = defaultText;\n\n        if (defaultText != undefined || defaultText != null) {\n            this.autoCompleteService.noRecordPlaceHolder = defaultText;\n            this.autoCompleteService.dataPresent = true;\n\n        } else {\n            this.noRecordPlaceHolder = this.autoCompleteService.noRecordPlaceHolder;\n        }\n    }\n\n\n    configureListType() {\n\n        if (this.list.length && typeof this.list[0] === \"object\") {\n            this.listType = \"object\"\n        }\n\n        if (this.list.length && typeof this.list[0] === \"string\") {\n            this.listType = \"string\"\n        }\n    }\n\n    configureDirective() {\n        if (!this.inpRef[\"id\"]) {\n            throw \"auto-directive ID Required! Please provide the unique directive id\";\n        }\n\n        if (this.listType === \"object\" && !this.filterName) {\n            throw \"Object List Found! Please provide filterName to pluck from object\";\n        }\n\n        if (this.wordTrigger) {\n            this.listShown = [];\n            return;\n        }\n\n        // initiated coz- after one leter it helps to open\n        this.filterList();\n        this.initDropdown();\n    }\n\n    filterList() {\n        var that = this;\n        var fieldTomatch = new RegExp(that.elemRef.nativeElement[\"value\"], 'ig');\n        var data = [];\n\n        if (that.listType === \"string\") {\n            data = that.list.filter((item: any) => (item.toLowerCase()).match(fieldTomatch));\n        }\n\n        if (that.listType === \"object\") {\n            data = that.list.filter((item: any) => (item[that.filterName].toLowerCase()).match(fieldTomatch));\n        }\n\n        if (that.listlength) {\n            that.listShown = data.slice(0, this.listlength);\n        } else {\n            that.listShown = that.list; //all\n        }\n\n        return that.listShown;\n    }\n\n\n    autoCompleteSelect(event: any, ui: any) {\n        var that = this;\n        let dataFromList = that.searchfromList(ui);\n        let id = `#${event.target.id}`\n\n        //for ngmodule\n        if (dataFromList) {\n            that.ngModelChange.emit(ui.item.value);\n            that.valueChanged.emit(ui.item.value);\n        } else {\n            that.ngModelChange.emit(\"\");\n            that.valueChanged.emit(\"\");\n            setTimeout(() => {\n                $(id).val(\"\");\n            }, 0);\n        }\n\n        // for Rectiveforms model\n        if (that.reactiveFormControl) {\n            if (dataFromList) {\n                that.reactiveFormControl.control.setValue(ui.item.value);\n            } else {\n                that.reactiveFormControl.control.setValue(\"\");\n            }\n        }\n\n\n\n    }\n\n    autoCompleteChange(event: any, ui: any) {\n\n        var that = this;\n        let dataFromList = that.searchfromList(ui);\n        let id = `#${event.target.id}`;\n\n        //for ngmodule\n        if (dataFromList) {\n            that.ngModelChange.emit(that.elemRef.nativeElement[\"value\"]);\n            that.valueChanged.emit(that.elemRef.nativeElement[\"value\"]);\n\n        } else {\n            that.ngModelChange.emit(\"\");\n            that.valueChanged.emit(\"\");\n            setTimeout(() => {\n                $(id).val(\"\");\n            }, 0);\n        }\n\n        // for Rectiveforms model\n        if (that.reactiveFormControl) {\n            if (dataFromList) {\n                that.reactiveFormControl.control.setValue(that.elemRef.nativeElement[\"value\"]);\n            } else {\n                that.reactiveFormControl.control.setValue(\"\");\n            }\n        }\n\n    }\n\n    initDropdown(list: any = undefined, updatedListId: any = null) {\n\n        var id = updatedListId || `#${this.inpRef[\"id\"]}`;\n\n        if (this.noRecordPlaceHolder &&\n            list === undefined &&\n            this.listShown.length === 1 &&\n            this.listShown[0] === this.noRecordPlaceHolder) {\n\n            var that = this;\n\n            $(id).autocomplete({\n                // disabled: true,\n                source: function (request: any, response: any) {\n                    var matcher = new RegExp(that.noRecordPlaceHolder, \"i\");\n                    response(that.listShown, function (val: any) {\n                        console.log(val);\n                    });\n                }\n            })\n\n        } else {\n            if (this.listType === \"object\") {\n\n                var listData: any = [];\n                this.listShown.forEach((item: any) => {\n                    listData.push(item[this.filterName])\n                });\n\n                $(id).autocomplete({\n                    source: list != undefined ? list : listData,\n                    change: (event: any, ui: any) => {\n                        this.autoCompleteChange(event, ui);\n                    },\n                    select: (event: any, ui: any) => {\n                        this.autoCompleteSelect(event, ui);\n                    }\n                });\n\n            } else {\n                $(id).autocomplete({\n                    source: list != undefined ? list : this.listShown,\n                    change: (event: any, ui: any) => {\n                        this.autoCompleteChange(event, ui);\n                    },\n                    select: (event: any, ui: any) => {\n                        this.autoCompleteSelect(event, ui);\n                    }\n                });\n            }\n\n        }\n\n    }\n\n    searchfromList(ui: any) {\n        var that = this;\n\n        var toFind = (ui && ui.item) ? ui.item.value : that.elemRef.nativeElement[\"value\"];\n        if (that.listType === \"string\") {\n            var data = that.list.find(item => toFind === item);\n            return data;\n        }\n\n        if (that.listType === \"object\") {\n            var data = that.list.find(item => toFind === item[that.filterName]);\n            return data;\n        }\n    }\n\n    activateEvents() {\n        var that = this;\n        // var id = `#${that.inpRef[\"id\"]}`;\n\n        // $(\"#city\")\n        //     .on(\"autocompleteselect\", function (event: any, ui: any) {\n\n        //         //for ngmodule                \n        //         if (that.searchfromList(ui)) {\n        //             that.ngModelChange.emit(ui.item.value);\n        //             that.valueChanged.emit(ui.item.value);\n        //         } else {\n        //             that.ngModelChange.emit(\"\");\n        //             that.valueChanged.emit(\"\");\n        //         }\n\n        //         // for Rectiveforms model\n        //         if (that.reactiveFormControl) {\n        //             if (that.searchfromList(ui)) {\n        //                 that.reactiveFormControl.control.setValue(ui.item.value);\n        //             } else {\n        //                 that.reactiveFormControl.control.setValue(\"\");\n        //             }\n        //         }\n\n        //     });\n\n        // $(\"#city\")\n        //     .on(\"autocompletechange\", function (event: any, ui: any) {\n\n        //         //for ngmodule\n        //         if (that.searchfromList(ui)) {\n        //             that.ngModelChange.emit(that.elemRef.nativeElement[\"value\"]);\n        //             that.valueChanged.emit(that.elemRef.nativeElement[\"value\"]);\n\n        //         } else {\n        //             that.ngModelChange.emit(\"\");\n        //             that.valueChanged.emit(\"\");\n        //         }\n\n        //         // for Rectiveforms model\n        //         if (that.reactiveFormControl) {\n        //             if (that.searchfromList(ui)) {\n        //                 that.reactiveFormControl.control.setValue(that.elemRef.nativeElement[\"value\"]);\n        //             } else {\n        //                 that.reactiveFormControl.control.setValue(\"\");\n        //             }\n        //         }\n\n        //     });\n\n        Observable.fromEvent(this.elemRef.nativeElement, 'keyup')\n            .subscribe((e: any) => {\n\n                this.removeOldList();\n\n                if (that.inpRef[\"value\"].length <= (that.wordTrigger - 1)) {\n                    that.initDropdown([]);\n                    return;\n                }\n\n                that.filterList();\n\n                if (that.noRecordPlaceHolder && !that.listShown.length) {\n                    this.listShown = [that.noRecordPlaceHolder];\n                    that.initDropdown();\n                    return;\n\n                }\n                that.initDropdown();\n            });\n\n        this.autoCompleteService.settingDynamicList\n            .subscribe(bool => {\n                if (bool) {\n                    this.list = this.autoCompleteService.list;\n                    this.restartDirective();\n                }\n            });\n\n        this.autoCompleteService.updatingList\n            .subscribe(bool => {\n                if (bool) {\n                    var updatedList = this.autoCompleteService.updatedList;\n                    var updatedListId = this.autoCompleteService.updatedListId;\n                    this.initDropdown(updatedList, updatedListId);\n                }\n            });\n\n    }\n\n    restartDirective() {\n        this.configureListType();\n        this.configureDirective();\n    }\n\n    removeOldList() {\n        this.initDropdown([]);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n    selector: '[ng4-auto-complete]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer2, },\n{type: AutoCompleteService, },\n{type: NgControl, decorators: [{ type: Optional }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngModelChange': [{ type: Output },],\n'valueChanged': [{ type: Output },],\n'autoComplete': [{ type: Input, args: ['ng4-auto-complete', ] },],\n'openOnWordLength': [{ type: Input, args: ['word-trigger', ] },],\n'listLengthToShow': [{ type: Input, args: ['list-length', ] },],\n'filterIdentity': [{ type: Input, args: ['filterName', ] },],\n'noRecordText': [{ type: Input, args: ['no-record-text', ] },],\n};\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}